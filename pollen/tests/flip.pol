graph out_g;
parset out_steps[Step, out_g];
parset out_paths[Path, out_g];

local is_rev(Path path) {
  fw = 0;
  bw = 0;
  for step in path.steps {
    sh = step.handle;
    len = sh.segment.sequence.length();
    if sh.orientation {
      fw += len;
    }
    else {
      bw += len;
    }
  }
  return bw > fw;
}

local flip_path(Path path) {
  if is_rev(path) {
    for step in rev(path.steps) {
      emit { 
        step with handle: 
          { step.handle with
            orientation = !step.handle.orientation
          }
      } to out_steps;
    }
  }
  emit { path with steps: path_steps } to out_paths;
}

for path in in_g.paths {
  flip_path(path);
}
