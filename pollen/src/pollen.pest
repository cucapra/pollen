WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ ("//" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | EOI)) 
            | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// Excludes type keywords
// keywords = _{ "if" | "elif" | "else" | "for" | "in" | "while" }

/* ----- Program ----- */
file = { 
    SOI
    ~ imports
    ~ func_defs
    ~ EOI
}
    imports = { import* }
    func_defs = { func_def+ }

/* ----- Import ----- */
import = _{ import_as | import_from }

import_as = { "import" ~ filename ~ ("as" ~ identifier)? ~ ";" }
import_from = { "from" ~ filename ~ "import" ~ func_as_id ~ ("," ~ func_as_id)* ~ ";"}
    func_as_id = { identifier ~ ("as" ~ identifier)? }

// TODO: Probably make this less permissible
filename = @{ (!(WHITESPACE | ";") ~ ANY)+ }

/* ----- Types ----- */
// Types that do not contain fields or method calls

atomic_typ = { "int" | "bool" | "char" | "Path" | "Segment" | "Step" | "Edge" 
            | "Base" | "String" | "Strand" }

// TODO: allow larger tuples
tuple_typ = { "(" ~ atomic_typ ~ ("*" ~ atomic_typ)/*+*/ ~ ")" }

set_typ = { "Set<" ~ typ ~ ">" }

// String and Strand are not atomic types because they cannot be part of tuples
typ = _{ atomic_typ | set_typ | tuple_typ /* | typ ~ ( "[]"* ) */ }

/* Record types are not included because the user will never 
    need to explicitly define one */


/* ----- Literals ----- */
integer_lit = @{ ("+" | "-")? ~ ASCII_DIGIT+ }
bool_lit = _{ true_lit | false_lit }
    true_lit = { "true" }
    false_lit = { "false" }

single_quote = _{ "'" }
double_quote = _{ "\"" }
backslack = _{ "\\" }

backspace_chars = _{ back_backslash | back_tab | back_newline | back_single_quote 
                    | back_double_quote }
    back_backslash = { "\\\\" }
    back_tab = { "\\t" }
    back_newline = { "\\n" }
    back_single_quote = @{ "\\" ~ single_quote }
    back_double_quote = @{ "\\" ~ double_quote }

normal_char = { !backslack ~ ANY }

char = _{ backspace_chars | normal_char }
char_lit = ${ (single_quote ~ (!single_quote ~ char) ~ single_quote) }
string_lit = ${ double_quote ~ (!double_quote ~ char)* ~ double_quote }
// TODO: Try to find a way to use string_lit and strand_lit via precedence?

// array_lit = { "[" ~ expr? ~ ("," ~ expr)* ~ "]" }
record_lit = { typ ~ "{" ~
                identifier ~ ":" ~ expr  ~ 
                ("," ~ identifier ~ ":" ~ expr)* ~ "}"
             }
record_update_lit = { "{" ~ expr ~ "with" ~
                identifier ~ ":" ~ expr  ~ 
                ("," ~ identifier ~ ":" ~ expr)* ~ "}"
             }
tuple_lit = { "(" ~ expr ~ "," ~ expr ~ ")" }

literal = _{ integer_lit | bool_lit | char_lit | string_lit 
            | record_lit | record_update_lit | tuple_lit }


/* ----- Expressions ----- */

identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" | "-" | "'" )* }

binop = _{ add | sub | mult | div | modulo | geq | leq | lt | gt | eq | neq |
          and | or | field_access }
    add = { "+" }
    sub = { "-" }
    mult = { "*" }
    div = { "/" }
    modulo = { "%" }
    geq = { "<=" }
    leq = { ">=" }
    lt = { "<" }
    gt = { ">" }
    eq = { "==" }
    neq = { "!=" }
    and = { "&&" }
    or = { "||" }
    field_access = { "." }


// unary operator(s)
prefix = _{ not }
    not = { "!" }

call_begin = { "(" }

obj_initialize = { typ ~ "()" }
call_args = { "(" ~ (expr ~ ("," ~ expr)*)? ~ ")" }
func_call = { identifier ~ call_args }

term = _{ literal | obj_initialize | func_call | identifier | "(" ~ expr ~ ")" | "[" ~ expr ~ "]" }

array_access = { "[" ~ expr ~ "]" }
postfix = _{ array_access }
term_ext = _ { prefix* ~ term ~ postfix* }

expr = { term_ext ~ (binop ~ term_ext) * }


/* ----- Statements ---- */
decl = { identifier ~ ":" ~ typ ~ ("=" ~ expr)? ~ ";"}
graph_decl = { "graph" ~ identifier ~ ";" }
parset_decl = { "parset" ~ identifier ~ "[" ~ typ ~ ("," ~ identifier)? ~ "]" ~ ";"}

assign = { identifier ~ "=" ~ expr ~ ";" }
// assign = { (((identifier | array_access | record_access) ~ ("=" | "+=") ~ expr) | (identifier ~ "++")) ~ ";"}

block = { "{" ~ stmt+ ~ "}" }

// Control Flow
if_stmt = { "if" ~ expr ~ block ~ ("elif" ~ expr ~ block)* ~ ("else" ~ block)? }
while_stmt = { "while" ~ expr ~ block }
for_stmt = { "for" ~ identifier ~ "in" ~ expr ~ block }

// Function call
call_stmt = { expr ~ ";" }

// Emit statements
emit_to = { "emit" ~ expr ~ "to" ~ identifier ~ ";" }

stmt = { decl | graph_decl | parset_decl | assign | block 
        | if_stmt | while_stmt | for_stmt | emit_to | call_stmt }

func_def = { "def" ~ identifier ~ 
             func_def_args ~
             ret_typ ~
             func_body
           }
    func_def_args = { "(" ~ (identifier ~ ":" ~ typ ~ ("," ~ identifier ~ ":" ~ typ)*)? ~ ")" }
    ret_typ = { ("->" ~ typ)? }
    // function definitions must contain at least one statement or return
    func_body = { "{" ~ stmt* ~ ret? ~ "}" }
        ret = { "return" ~ expr ~ ";" }
