WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ ("//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE) | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// Excludes type keywords
// keywords = _{ "if" | "elif" | "else" | "for" | "in" | "while" }

/* ----- Program ----- */
prog = { 
    SOI
    ~ stmt+
    ~ EOI
}

/* ----- Types ----- */
atomic_typ = { "int" | "bool" | "char" | "String" |
                "Node" | "Step" | "Edge" | "Base" | "Strand" }

tuple_typ = { atomic_typ ~ ("*" ~ atomic_typ)+ }

// String and Strand are not atomic types because they cannot be part of tuples
typ = _{ atomic_typ | tuple_typ  /* | typ ~ ( "[]"* ) */ }

/* Record types are not included because the user will never 
    need to explicitly define one */


/* ----- Literals ----- */
integer_lit = @{ ("+" | "-")? ~ ASCII_DIGIT+ }
bool_lit = _{ true_lit | false_lit }
    true_lit = { "true" }
    false_lit = { "false" }

single_quote = _{ "'" }
double_quote = _{ "\"" }
backslack = _{ "\\" }

backspace_chars = _{ back_backslash | back_tab | back_newline | back_single_quote 
                    | back_double_quote }
    back_backslash = { "\\\\" }
    back_tab = { "\\t" }
    back_newline = { "\\n" }
    back_single_quote = @{ "\\" ~ single_quote }
    back_double_quote = @{ "\\" ~ double_quote }

normal_char = { !backslack ~ ANY }

char = _{ backspace_chars | normal_char }
char_lit = ${ (single_quote ~ (!single_quote ~ char) ~ single_quote) }
string_lit = ${ double_quote ~ (!double_quote ~ char)* ~ double_quote }
// TODO: Try to find a way to use string_lit and strand_lit via precedence?

// array_lit = { "[" ~ expr? ~ ("," ~ expr)* ~ "]" }

literal = _{ integer_lit | bool_lit | char_lit | string_lit /* | array_lit */ }


/* ----- Expressions ----- */

identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" | "-" | "'" )* }

binop = _{ add | sub | mult | div | modulo | geq | leq | lt | gt | eq | neq |
          and | or }
    add = { "+" }
    sub = { "-" }
    mult = { "*" }
    div = { "/" }
    modulo = { "%" }
    geq = { "<=" }
    leq = { ">=" }
    lt = { "<" }
    gt = { ">" }
    eq = { "==" }
    neq = { "!=" }
    and = { "&&" }
    or = { "||" }

// unary operator(s)
prefix = _{ not }
    not = { "!" }

//call = { identifier ~ "(" ~ expr? ~ ("," ~ expr)* ")" }
//array_access = { identifier ~ "[" ~ expr ~ "]"}
// record_access = { identifier ~ "." ~ identifier }

term = _{ literal | identifier | "(" ~ expr ~ ")" | "[" ~ expr ~ "]" }

expr = { prefix* ~ term ~ (binop ~ prefix* ~ term )* }


/* ----- Statements ---- */
decl = { identifier ~ ":" ~ typ ~ ("=" ~ expr)? ~ ";"}
// assign = { (((identifier | array_access | record_access) ~ ("=" | "+=") ~ expr) | (identifier ~ "++")) ~ ";"}
// Function call
//call_stmt = { call ~ ";" }

//block = { "{" stmt+ "}" }

// Control Flow
//if_stmt = { "if " ~ expr ~ block ~ ("el"if_stmt)* ~ ("else" ~ block)? }
//while_stmt = { "}
//for_stmt = {}


stmt = { decl /* | assign | call_stmt | if */ }

/* ----- Import ----- */
//import = {"use" ~ (!";" ~ ANY)+ ~ ";"} 