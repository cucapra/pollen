# We use the small set of tests by default, because larger files make
# slow_odgi go *really* slow.
TESTS := t k note5 overlap q.chop DRB1-3123

GFA := $(TESTS:%=../tests/%.gfa)
OG := $(TESTS:%=../tests/%.og)

%.og: %.gfa
	odgi build -g $^ -o $@

# Sets up all the odgi-oracles and then tests slow_odgi against them.
test: setup oracles slow-odgi

# Produce some input files that are necessary for the slow_odgi tests.
setup: $(OG)
	-turnt -j --save --env depth_setup --env inject_setup \
		--env overlap_setup --env validate_setup $(GFA)

# Produce the oracle output (from "real" odgi) for each test input. Run this
# once, noisily, to obtain the expected outputs. Then run `slow-odgi` to
# compare against these expected outputs.
# In reality, this depends on the setup stage above. Run this by itself ONLY
# if you know that the setup stages don't need to be run afresh.
ORACLES := chop_oracle crush_oracle degree_oracle depth_oracle \
	flip_oracle flatten_oracle inject_oracle matrix_oracle overlap_oracle \
	paths_oracle validate_oracle
oracles: $(OG)
	-turnt -j --save $(ORACLES:%=--env %) $(OG)
	-turnt -j --save --env validate_oracle_err ../tests/invalid/*.gfa
	-turnt -j --save --env crush_oracle ../tests/handmade/crush*.gfa
	-turnt -j --save --env flip_oracle ../tests/handmade/flip*.gfa

# Test slow_odgi against the output files generated by the `oracles`
# target above. Be sure to rerun that before this if the inputs or odgi
# behavior change.
TEST_ENVS := chop_test crush_test degree_test depth_test flip_test \
	 flatten_test inject_test matrix_test overlap_test paths_test validate_test
slow-odgi:
	-turnt -j $(TEST_ENVS:%=--env %) $(GFA)
	-turnt -j --env validate_test ../tests/invalid/*.gfa
	-turnt -j --env crush_test ../tests/handmade/crush*.gfa
	-turnt -j --env flip_test ../tests/handmade/flip*.gfa
